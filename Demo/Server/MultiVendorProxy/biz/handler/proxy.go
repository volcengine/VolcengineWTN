// Code generated by hertz generator.

package handler

import (
	"context"
	"net/http"
	"time"

	"proxy_server/biz/model"
	"proxy_server/biz/service"
	"proxy_server/whipsdk"
	"proxy_server/whipsdk/logger"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

var (
	secret    = []byte("YOUR SECRET")
	log       = logger.DefaultLogger()
	whipProxy whipsdk.WhipProxy
)

func init() {

	whipProxy = whipsdk.NewWhipProxy(
		whipsdk.WithSecret(secret),
		whipsdk.WithVendorInfoGetter(service.Getter),
		// 设置日志组件
		whipsdk.WithLogger(log),
	)
}

// Proxy .
func Proxy(ctx context.Context, c *app.RequestContext) {
	// your code ...

	req := model.ProxyReq{}
	err := c.BindAndValidate(&req)
	if err != nil {
		log.CtxErrorf(context.TODO(), "bad request:%s", string(c.Request.Body()))
		c.JSON(http.StatusBadRequest, "params is invalid")
		return
	}

	ctx = context.WithValue(ctx, logger.CtxLogId, req.TraceId)
	defer func(start time.Time) {
		log.CtxInfof(ctx, "[cost:%s] proxy req:%+v", time.Since(start).String(), req)
	}(time.Now())

	wReq, err := whipProxy.CheckToken(ctx, req.Params, req.Token)
	if err != nil {
		BuildErrResp(c, err)
		return
	}

	resp, err := whipProxy.SendWhip(ctx, wReq)
	if err != nil {
		BuildErrResp(c, err)
		return
	}
	BuildSuccResp(c, resp)
}

func BuildErrResp(c *app.RequestContext, err error) {
	code, msg, origin := whipsdk.GetCodeAndMessage(err)
	c.Response.Header.Set(whipsdk.RespHeaderMsgOrigin, string(origin))
	c.String(code, msg)
}

// 透传产商返回信息，包括header头
func BuildSuccResp(c *app.RequestContext, resp *whipsdk.WhipResp) {
	for k, v := range resp.Headers {
		for _, val := range v {
			c.Response.Header.Add(k, val)
		}
	}

	c.Data(resp.StatusCode, c.Response.Header.Get("Content-Type"), []byte(resp.Body))
}

func GenTokenForTest(ctx context.Context, c *app.RequestContext) {
	req := whipsdk.WhipReq{}
	err := c.Bind(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, "params is invalid")
		return
	}

	params := whipsdk.MarshalToString(req)
	c.JSON(http.StatusOK, utils.H{
		"params": params,
		"token":  whipsdk.GenByteRTCToken(params, secret),
	})
}
